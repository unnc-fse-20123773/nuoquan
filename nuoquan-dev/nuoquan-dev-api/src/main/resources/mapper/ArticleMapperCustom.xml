<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nuoquan.mapper.ArticleMapperCustom">
  <resultMap id="BaseResultMap" type="com.nuoquan.pojo.vo.ArticleVO">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="article_title" jdbcType="VARCHAR" property="articleTitle" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="tags" jdbcType="VARCHAR" property="tags" />
    <result column="article_content" jdbcType="LONGVARBINARY" property="articleContent" />
    <result column="like_num" jdbcType="INTEGER" property="likeNum" />
    <result column="dislike_num" jdbcType="INTEGER" property="dislikeNum" />
    <result column="comment_num" jdbcType="INTEGER" property="commentNum" />
    <result column="popularity" jdbcType="INTEGER" property="popularity" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="is_anonymous" jdbcType="TINYINT" property="isAnonymous" />
    <result column="view_num" property="viewNum" jdbcType="INTEGER" />
    
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="face_img" property="faceImg" jdbcType="VARCHAR" />
    <result column="face_img_thumb" property="faceImgThumb" jdbcType="VARCHAR" />
  </resultMap>
  
  <select id="queryAllArticles" resultMap="BaseResultMap">
  	
 	select a.*, u.nickname as nickname, u.face_img, u.face_img_thumb from nuoquan.article a
   	left join nuoquan.user u on u.id = a.user_id
  	where
  		1 = 1
  		and a.status = 1
  	order by a.create_date desc
  </select>
  
  <update id="addArticleLikeCount" parameterType="String">
  	update nuoquan.article set like_num=like_num+1 where id=#{articleId}
  </update>
  
  <update id="reduceArticleLikeCount" parameterType="String">
  	update nuoquan.article set like_num=like_num-1 where id=#{articleId}
  </update>
  
  <update id="addArticleCommentCount" parameterType="String">
  	update nuoquan.article set comment_num=comment_num+1 where id=#{articleId}
  </update>
  
  <select id="searchArticleContentYang" resultMap="BaseResultMap" parameterType="String">
  	select a.*, u.nickname as nickname, u.face_img, u.face_img_thumb from nuoquan.article a
   	left join nuoquan.user u on u.id = a.user_id
  	where
  		1 = 1
  		and (<if test=" searchKeywords != null and searchKeywords != '' ">
  			a.article_content like '%${searchKeywords}%'
  			or a.article_title like '%${searchKeywords}%'
  			or a.tags like '%${searchKeywords}%'
  		</if>)
  		and a.status = 1
  		<!-- and a.is_anonymous = 0 -->
  	order by a.create_date desc
  </select>
  
  <update id="upadtePopByFunction">
  	update nuoquan.article as a left join 
		(select article_id, count(article_id) as c_in24h from nuoquan.user_article_comment
		where 
		1=1  
		and UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(create_date) &lt;= 86400
		GROUP BY article_id) as c on a.id = c.article_id left join
			(select article_id, count(article_id) as l_in24h from nuoquan.user_like_article
			where 
			1=1 
			and UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(create_date) &lt;= 86400
			GROUP BY article_id) as l on a.id=l.article_id
	set a.popularity = if(c.article_id is null, 
						if(l.article_id is null, 0, l.l_in24h), 
							if(l.article_id is null, c.c_in24h, c.c_in24h+l.l_in24h));
  </update>
  
<!-- 【勿删】upadtePopByFunction 的数据库测试用例 mysql代码：查看 c_in24h + l_in24h = popularity? by Jerrio
select * from (
	select * from nuoquan.article as a left join (
		select article_id, count(article_id) as c_in24h from nuoquan.user_article_comment
		where 
		HOUR( timediff( now(), create_date) ) < 24
		GROUP BY article_id 
	) as b on a.id = b.article_id
) as c left join (
	select article_id, count(article_id) as l_in24h from nuoquan.user_like_article
	where 
	HOUR( timediff( now(), create_date) ) < 24
	GROUP BY article_id
) as d on c.id=d.article_id -->
  	
  <select id="getTop3ByPopularity" resultMap="BaseResultMap">
  	select a.*, u.nickname as nickname, u.face_img, u.face_img_thumb from nuoquan.article a
   	left join nuoquan.user u on u.id = a.user_id
  	where
  		1 = 1
  		and a.status = 1 
  	order by popularity desc limit 0,3;
  </select>
  
  <select id="getArticleById" resultMap="BaseResultMap">
  	select a.*, u.nickname as nickname, u.face_img, u.face_img_thumb from nuoquan.article a
   	left join nuoquan.user u on u.id = a.user_id
  	where
  		1 = 1
  		and a.id = #{articleId}
  </select>
  
</mapper>
